version: 2.1

commands:
  install-awscli:
    description: Install awscli on images that does not contained it
    steps:
      - run:
          name: Install awscli
          when: on_fail
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      description:
        type: string
        description: the environment stack to destroy
      stack-name:
        type: string
        description: Name of the stack to destroy
    steps:
      - run:
          name: Destroy << parameters.description >> environments
          when: on_fail
          command: |
            if [[ << parameters.description >> == *"frontend"* ]];
            then
              aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            fi
            aws cloudformation delete-stack --stack-name << parameters.stack-name >>

  
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    # parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl \
              -H "Content-Type: text/plain" \
              -H "Authorization:$LUCID_JWT_TOKEN" \
              --request GET \
              -k --data "1" ${KEY_VALUE_STORE_ENDPOINT}/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if(( $SUCCESS==1 )); 
            then
              #  Add revert code here. You can find this in the Getting Started section.
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: frontend-test
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: backend-test
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-scan]
      - run:
          name: frontend-scan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-scan

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-scan]
      - run:
          name: backend-scan
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
      - save_cache:
          paths: [backend/node_modules]
          key: backend-scan

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli:latest
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [deploy-infrastructure]
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws cloudformation describe-stacks \
             --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
             --query 'Stacks[0].Outputs[?OutputKey==`BackendIP`].OutputValue' \
             --output text >> /root/project/.circleci/ansible/inventory.txt
            mkdir -m 777 -p /tmp/workspace && cp /root/project/.circleci/ansible/inventory.txt /tmp/workspace
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - persist_to_workspace:
          root: /tmp
          paths:
            - workspace
      - run:
          name: checking persist
          command: |
            ls -la /tmp/workspace/inventory.txt
            cat /tmp/workspace/inventory.txt
      # Here's where you will add some code to rollback on failure      
      - destroy-environment:
          description: backend
          stack-name: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment:
          description: frontend
          stack-name: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" 

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - 'ec:ee:03:33:13:fc:ea:71:6d:29:46:13:dd:2a:42:36'
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip ansible aws-cli
      # attach workspace
      - attach_workspace:
          at: /tmp
      - run:
          name: Configure server
          command: |
            # Your code here
            ls -la /tmp && ls -la /tmp/workspace && ls -la /tmp/workspace/inventory.txt \
            && cp /tmp/workspace/inventory.txt .circleci/ansible/ \
            && cat .circleci/ansible/inventory.txt
            cd .circleci/ansible
            /usr/bin/ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          description: backend
          stack-name: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment:
          description: frontend
          stack-name: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"    

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [run-migrations]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm audit fix --force
            npm build
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "success" ~/project/backend/migrations.txt
            then
              curl --insecure https://kvdb.io/ViWzkdySLpmD9TMMzU5Fzq/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            fi
     # Here's where you will add some code to rollback on failure
      - install-awscli
      - destroy-environment:
          description: backend
          stack-name: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment:
          description: frontend
          stack-name: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"    

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [deploy-frontend]
      - run:
          name: Install dependencies
          command: |
            # your code here
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws cloudformation describe-stacks \
             --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
             --query 'Stacks[0].Outputs[?OutputKey==`BackendIP`].OutputValue' \
             --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            touch frontend/.env
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - save_cache:
          paths: [frontend/node_modules]
          key: deploy-frontend
      # Here's where you will add some code to rollback on failure      
      - revert-migrations
      - destroy-environment:
          description: backend
          stack-name: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment:
          description: frontend
          stack-name: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      # - image: circleci/node:13.8.0
      - image: "amazon/aws-cli:latest"
    steps:
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys: 
          fingerprints:
            - "be:a0:be:46:ca:35:c7:7a:db:2c:aa:a3:52:d1:63:6b"
      - run:
          name: Install dependencies
          command: |
            # your code here
            yum install -y wget
            wget http://dl.fedoraproject.org/pub/epel/7/x86_64/Packages/e/epel-release-7-14.noarch.rpm
            rpm -ivh epel-release-7-14.noarch.rpm
            yum clean expire-cache
            yum install -y ansible python3 tar gzip
            ansible --version
      - attach_workspace:
          at: /tmp
      - restore_cache:
          keys: [deploy-backend]
      - run:
          name: Deploy backend
          command: |
            # your code here
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm install 13.8.0
            npm -v
            node -v
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            mkdir .circleci/ansible/roles/deploy-backend/files
            mv artifact.tar.gz .circleci/ansible/roles/deploy-backend/files
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cp /tmp/workspace/inventory.txt .
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - save_cache:
          paths: [backend/node_modules]
          key: deploy-backend
      # Here's where you will add some code to rollback on failure  
      - revert-migrations
      # - install-awscli
      - destroy-environment:
          description: backend
          stack-name: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment:
          description: frontend
          stack-name: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: cimg/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            sudo apt update && sudo apt install -y curl wget tar gzip
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Backend smoke test.
          command: |
            # your code here
            BACKEND_IP=$(aws cloudformation describe-stacks \
             --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
             --query 'Stacks[0].Outputs[?OutputKey==`BackendIP`].OutputValue' \
             --output text)
            API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
              exit 0
            else
              exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              # Change this to 0 after the job fails
              exit 1
            else
              exit 1
            fi
      # Here's where you will add some code to rollback on failure  
      - revert-migrations
      - destroy-environment:
          description: backend
          stack-name: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment:
          description: frontend
          stack-name: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"


#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      - deploy-infrastructure:
          requires: [build-frontend, build-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]